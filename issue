 binding.spDialerCountry.onItemSelectedListener =
            object : AdapterView.OnItemSelectedListener {
                override fun onItemSelected(
                    parent: AdapterView<*>?,
                    view: View?,
                    position: Int,
                    id: Long
                ) {
                    val country = countryAdapter.getItem(position) as CountriesList
                    countryCodeISO = country.countryIsoCode
                    countryName = country.countryName
                    var text = binding.etDialNumber.text.toString()



                    if (text.isEmpty() || text == "+") {
                        text = country.code
                        binding.etDialNumber.setText(text)
                        binding.etDialNumber.setSelection(text.length)

                    }
                    else if (text.contains(countryCode) && countryCode.isNotEmpty()) {
                        text = text.replace(countryCode, country.code)
                        binding.etDialNumber.setText(text)
                    } else if (text.isEmpty()) {

                        binding.etDialNumber.setText(country.code)

                    }
                    countryCode = country.code

                        binding.spDialerCountry.setSelection(position)



                }


                override fun onNothingSelected(parent: AdapterView<*>?) {
                    Logger.e(TAG,"onNothingSelected parent")
                }


            }
     //  binding.etDialNumber.addTextChangedListener(this)
        binding.etDialNumber.addTextChangedListener(object : TextWatcher {
            private var isEditTextUpdate = false

            override fun beforeTextChanged(s: CharSequence?, start: Int, count: Int, after: Int) {}

            override fun onTextChanged(s: CharSequence?, start: Int, before: Int, count: Int) {


            }

            @SuppressLint("SuspiciousIndentation")
            override fun afterTextChanged(editable: Editable?) {
                if (isEditTextUpdate) {
                    isEditTextUpdate = false
                    return
                }


                var text = editable?.toString() ?: ""

                   if (!text.startsWith("+")) {
                    isEditTextUpdate = true
                    text = "+$text"
                    binding.etDialNumber.setText(text)
                    binding.etDialNumber.setSelection(text.length)
                    return
                }
                 val selectedPosition = binding.spDialerCountry.selectedItemPosition


                val currentPosition = binding.spDialerCountry.selectedItemPosition

                val currentCountry = countryAdapter.getItem(currentPosition) as CountriesList
                val detectedRegion = getCorrectNumberRegion(text, currentCountry.countryIsoCode)
                var matchFound = false


                if (!detectedRegion.isNullOrEmpty()) {
                    for (i in 0 until countryAdapter.count) {
                        val country = countryAdapter.getItem(i) as CountriesList
                        if (country.countryIsoCode.equals(detectedRegion, ignoreCase = true)) {
                            if (currentPosition != i) {
                                isEditTextUpdate = true
                                binding.spDialerCountry.setSelection(i)
                            }
                            matchFound = true
                            break
                        }
                    }
                }
                if (!matchFound) {
                    for (i in 0 until countryAdapter.count) {
                        val country = countryAdapter.getItem(i) as CountriesList

                        if (text.startsWith(country.code)) {
                            if (currentPosition != i || country.countryIsoCode != currentCountry.countryIsoCode) {
                                isEditTextUpdate = true
                                binding.spDialerCountry.setSelection(i)
                            }
                            matchFound = true
                            break

                        }
                    }

                }
                if (!matchFound) {
                    Log.d(TAG, "No match found for text: $text")
                }

                Log.d(TAG, "After Selection: ${binding.spDialerCountry.selectedItemPosition}")
            }

        })
fun getCorrectNumberRegion(phoneNumber: String, countryIso: String): String? {
    val phoneNumberUtil :PhoneNumberUtil = PhoneNumberUtil.getInstance()
    try {
        var phone = phoneNumberUtil.parse(phoneNumber, countryIso)
        if (phoneNumber.length>9) {
            var region = phoneNumberUtil.getRegionCodeForNumber(phone)
            return region
        }
        return ""

    } catch (e: Exception) {
        Logger.e("NumberParseException", "" + e)
    }
    return null
}
